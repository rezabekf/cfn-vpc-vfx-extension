---
AWSTemplateFormatVersion: 2010-09-09
Description: Provides additional VPC with peering and Spot Fleet instances (uksb-1pcf0if40)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Region configuration
        Parameters:
          - pAvailabilityZones

      - Label:
          default: Network onfiguration
        Parameters:
          - pVPCProductionName
          - pVPCProductionCIDR
          - pProdAppPrivateSubnetACIDR
          - pProdAppPrivateSubnetBCIDR

    ParameterLabels:
      pAvailabilityZones:
        default: Availability Zones

      pVPCProductionName:
        default: Production VPC name

      pVPCProductionCIDR:
        default: Production VPC CIDR

      pProdAppPrivateSubnetACIDR:
        default: Production VPC private subnet 1 CIDR

      pProdAppPrivateSubnetBCIDR:
        default: Production VPC private subnet 2 CIDR

Parameters:
  pAvailabilityZones:
    Description: The list of Availability Zones to use for the subnets in the VPC.
      This template uses two Availability Zones from your list and preserves the logical order you specify.
    Type: List<AWS::EC2::AvailabilityZone::Name>

  pVPCProductionName:
    Default: Production VPC
    Description: Production VPC name
    Type: String

  pVPCProductionCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.110.0.0/16
    Description: The CIDR block for the production VPC.
    Type: String

  pProdAppPrivateSubnetACIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.110.0.0/19
    Description: The CIDR block for the private subnet located in Availability Zone 1 of the production VPC.
    Type: String

  pProdAppPrivateSubnetBCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.110.32.0/19
    Description: The CIDR block for the private subnet located in Availability Zone 2 of the production VPC.
    Type: String

  pRenderFarmTargetCapacity:
    Default: 2
    Description: The number of instances in the spot fleet
    Type: String

  pProjectName:
    Default: MyProject
    Description: The project name to use for tagging render farm instances.
    Type: String

  pEnvironment:
    AllowedValues:
      - DEV
      - TEST
      - PROD
    Default: DEV
    Description: The type of VFX environment to set up. You can specify DEV (development), TEST (test), or PROD (production).
    Type: String

Mappings:
  RegionServiceSupport:
    ap-northeast-1:
      EFS: 'true'
    ap-northeast-2:
      EFS: 'true'
    ap-northeast-3:
      EFS: 'false'
    ap-south-1:
      EFS: 'false'
    ap-southeast-1:
      EFS: 'true'
    ap-southeast-2:
      EFS: 'true'
    ca-central-1:
      EFS: 'false'
    eu-central-1:
      EFS: 'true'
    eu-west-1:
      EFS: 'true'
    eu-west-2:
      EFS: 'true'
    eu-north-1:
      EFS: 'false'
    eu-west-3:
      EFS: 'false'
    sa-east-1:
      EFS: 'false'
    us-east-1:
      EFS: 'true'
    us-east-2:
      EFS: 'true'
    us-west-1:
      EFS: 'true'
    us-west-2:
      EFS: 'true'
  RegionMap:
    ap-northeast-1:
      AMZNLINUX2AMI: ami-097473abce069b8e9
      InstanceTypes: [t2.micro, t3.micro]
    ap-northeast-2:
      AMZNLINUX2AMI: ami-045e355a6004a67c4
      InstanceTypes: [t2.micro, t3.micro]
    ap-south-1:
      AMZNLINUX2AMI: ami-03103e7ded4c02ef8
      InstanceTypes: [t2.micro, t2.micro]
    ap-southeast-1:
      AMZNLINUX2AMI: ami-00158b185c8cc09dc
      InstanceTypes: [t2.micro, t3.micro]
    ap-southeast-2:
      AMZNLINUX2AMI: ami-0c3228fd049cdb151
      InstanceTypes: [t2.micro, t3.micro]
    ca-central-1:
      AMZNLINUX2AMI: ami-05f9d71283317f5c9
      InstanceTypes: [t2.micro, t3.micro]
    eu-central-1:
      AMZNLINUX2AMI: ami-07f1fbbff759e24dd
      InstanceTypes: [t2.micro, t3.micro]
    eu-west-1:
      AMZNLINUX2AMI: ami-02a39bdb8e8ee056a
      InstanceTypes: [t2.micro, t3.micro]
    eu-west-2:
      AMZNLINUX2AMI: ami-07a5200f3fa9c33d3
      InstanceTypes: [t2.micro, t3.micro]
    sa-east-1:
      AMZNLINUX2AMI: ami-095a33e72f6bb89c3
      InstanceTypes: [t2.micro, t3.micro]
    us-east-1:
      AMZNLINUX2AMI: ami-02da3a138888ced85
      InstanceTypes: [t2.micro, t3.micro]
    us-east-2:
      AMZNLINUX2AMI: ami-0de7daa7385332688
      InstanceTypes: [t2.micro, t3.micro]
    us-west-1:
      AMZNLINUX2AMI: ami-09bfcadb25ee95bec
      InstanceTypes: [t2.micro, t3.micro]
    us-west-2:
      AMZNLINUX2AMI: ami-095cd038eef3e5074
      InstanceTypes: [t2.micro, t3.micro]

Conditions:
  SupportsEfs: !Equals
    - !FindInMap [RegionServiceSupport, !Ref 'AWS::Region', EFS]
    - true

  NoEfsSupport: !Not
    - Condition: SupportsEfs

Resources:
  # -- Create VPC -- #
  rVPCProduction:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVPCProductionCIDR
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref pVPCProductionName
        - Key: Environment
          Value: !Ref pEnvironment

  # -- Create Private Subnets -- #
  rProdAppPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pProdAppPrivateSubnetACIDR
      AvailabilityZone: !Select [0, !Ref pAvailabilityZones]
      VpcId: !Ref rVPCProduction
      Tags:
        - Key: Name
          Value: Production-2 App Subnet A
        - Key: Environment
          Value: !Ref pEnvironment

  rProdAppPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pProdAppPrivateSubnetBCIDR
      AvailabilityZone: !Select [1, !Ref pAvailabilityZones]
      VpcId: !Ref rVPCProduction
      Tags:
        - Key: Name
          Value: Production-2 App Subnet B
        - Key: Environment
          Value: !Ref pEnvironment

  # -- Create the Route Table for the Private Subnets -- #
  rRouteTableProdPrivateA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPCProduction
      Tags:
        - Key: Name
          Value: Production-2 Private Route A

  rRouteTableProdPrivateB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPCProduction
      Tags:
        - Key: Name
          Value: Production-2 Private Route B

  rProdAppPrivateSubnetAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTableProdPrivateA
      SubnetId: !Ref rProdAppPrivateSubnetA

  rProdAppPrivateSubnetAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTableProdPrivateB
      SubnetId: !Ref rProdAppPrivateSubnetB

  # -- Create FlowLogs and CloudWatch Logs Group including Service Role policy. -- #
  rProdVpcFlowLogsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowFlowLogs
            Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: cloudwatchlogsrole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Effect: Allow
                Resource: '*'

  rProdVpcFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90

  rProdVpcFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt rProdVpcFlowLogsServiceRole.Arn
      LogGroupName: !Ref rProdVpcFlowLogGroup
      ResourceId: !Ref rVPCProduction
      ResourceType: VPC
      TrafficType: ALL

  # -- Create Peering Connection from Management to Production VPC -- #
  rPeeringConnectionProduction:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      PeerVpcId: !Ref rVPCProduction
      VpcId: !ImportValue eVPCManagement
      Tags:
        - Key: Name
          Value: vpc-peer-2-prod-mgmt
        - Key: Environment
          Value: !Ref pEnvironment

  # -- Create routes from Management to Prod and from Prod to Management VPC -- #
  rRoute1MgmtToProdPrivateA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ImportValue eRouteTableMgmtPrivateA
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !Ref pVPCProductionCIDR

  rRoute2MgmtToProdPrivateB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ImportValue eRouteTableMgmtPrivateB
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !Ref pVPCProductionCIDR

  rRoute3ProdToMgmtPrivateA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rRouteTableProdPrivateA
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !ImportValue eManagementVpcCIDR

  rRoute4ProdToMgmtPrivateB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rRouteTableProdPrivateB
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !ImportValue eManagementVpcCIDR

  # -- Create VPC End Points for Production VPC -- #
  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref rVPCProduction
      GroupDescription: Allow traffic from within VPC
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref pVPCProductionCIDR

  SsmVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref rVPCProduction
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref rProdAppPrivateSubnetA
        - !Ref rProdAppPrivateSubnetB
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup

  SsmMessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref rVPCProduction
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref rProdAppPrivateSubnetA
        - !Ref rProdAppPrivateSubnetB
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup

  Ec2VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref rVPCProduction
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref rProdAppPrivateSubnetA
        - !Ref rProdAppPrivateSubnetB
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup

  Ec2MessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref rVPCProduction
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref rProdAppPrivateSubnetA
        - !Ref rProdAppPrivateSubnetB
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup

  CfnVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref rVPCProduction
      ServiceName: !Sub com.amazonaws.${AWS::Region}.cloudformation
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref rProdAppPrivateSubnetA
        - !Ref rProdAppPrivateSubnetB
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup

  CloudwatchLogsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref rVPCProduction
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref rProdAppPrivateSubnetA
        - !Ref rProdAppPrivateSubnetB
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup

  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref rVPCProduction
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref rRouteTableProdPrivateA
        - !Ref rRouteTableProdPrivateB

  # -- Create Spot Fleet instances -- #
  rRenderFarmSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref rVPCProduction
      GroupDescription: Render farm security group
      Tags:
        - Key: Name
          Value: render-farm-sg
        - Key: Environment
          Value: !Ref pEnvironment

  rRenderFarmEfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: SupportsEfs
    Properties:
      VpcId: !Ref rVPCProduction
      GroupDescription: Security group for render farm mount target
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref rRenderFarmSecurityGroup
      Tags:
        - Key: Name
          Value: efs-sg
        - Key: Environment
          Value: !Ref pEnvironment

  rRenderFarmEfs:
    Type: AWS::EFS::FileSystem
    Condition: SupportsEfs
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: RenderFarmFs
        - Key: Project
          Value: !Ref pProjectName

  rRenderFarmEfsMountTarget0:
    Type: AWS::EFS::MountTarget
    Condition: SupportsEfs
    Properties:
      FileSystemId: !Ref rRenderFarmEfs
      SubnetId: !Ref rProdAppPrivateSubnetA
      SecurityGroups:
        - !Ref rRenderFarmEfsSecurityGroup

  rRenderFarmEfsMountTarget1:
    Type: AWS::EFS::MountTarget
    Condition: SupportsEfs
    Properties:
      FileSystemId: !Ref rRenderFarmEfs
      SubnetId: !Ref rProdAppPrivateSubnetB
      SecurityGroups:
        - !Ref rRenderFarmEfsSecurityGroup

  rRenderFarmRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  rRenderFarmInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref rRenderFarmRole

  rSpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole

  rRenderFarmLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90

  rRenderFarmLaunchTemplateNoEfs:
    Condition: NoEfsSupport
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMZNLINUX2AMI]
        IamInstanceProfile:
          Name: !Ref rRenderFarmInstanceProfile
        SecurityGroupIds:
          - !Ref rRenderFarmSecurityGroup
        UserData:
          Fn::Base64: |
            #!/bin/bash -xe
            yum -y --security update

  rRenderFarmLaunchTemplateEfs:
    Condition: SupportsEfs
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              jq: []
              awslogs: []
          files:
            /tmp/dns.sh:
              content: !Sub |
                #!/bin/bash -x
                results=1
                while [[ $results != 0 ]]; do
                  nslookup ${rRenderFarmEfs}.efs.${AWS::Region}.amazonaws.com
                  results=$?
                  if [[ $results = 1 ]]; then
                    sleep 30s
                  fi
                done
              mode: '000755'
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${rRenderFarmLogGroup}
                log_stream_name = %INSTANCE_ID/var/log/messages
                datetime_format = %b %d %H:%M:%S
                initial_position = start_of_file
            /tmp/awslog_init.sh:
              content: !Sub |
                #!/bin/bash -xe
                INSTANCE_ID=$(curl -s http://instance-data/latest/meta-data/instance-id)
                sed -i "s|%INSTANCE_ID|$INSTANCE_ID|g" /etc/awslogs/awslogs.conf
                sed -i -e "s/region = us-east-1/region = ${AWS::Region}/g" /etc/awslogs/awscli.conf
                systemctl enable awslogsd.service
                systemctl start awslogsd.service
              mode: '755'
          commands:
            01_wait_for_dns_propogation:
              command: /tmp/dns.sh
            02_mount_efs:
              command: !Sub |
                #!/bin/bash -xe
                EFS_DIRECTORY=/mnt/efs
                mkdir $EFS_DIRECTORY
                echo "${rRenderFarmEfs}:/ $EFS_DIRECTORY efs _netdev" >> /etc/fstab
                mount -a -t efs defaults
            03_awslogs:
              command: tmp/awslog_init.sh
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMZNLINUX2AMI]
        IamInstanceProfile:
          Name: !Ref rRenderFarmInstanceProfile
        SecurityGroupIds:
          - !Ref rRenderFarmSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: vfx-render-farm
              - Key: Environment
                Value: !Ref pEnvironment
              - Key: Project
                Value: !Ref pProjectName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update --security -y
            yum update aws-cfn-bootstrap -y
            yum install amazon-efs-utils -y

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rRenderFarmLaunchTemplateEfs --region ${AWS::Region}

  rRenderFarmSpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: 'diversified'
        IamFleetRole: !GetAtt rSpotFleetRole.Arn
        TargetCapacity: !Ref pRenderFarmTargetCapacity
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !If [SupportsEfs, !Ref rRenderFarmLaunchTemplateEfs, !Ref rRenderFarmLaunchTemplateNoEfs]
              Version: '1'
            Overrides:
              - InstanceType: !Select [0, !FindInMap [RegionMap, !Ref 'AWS::Region', InstanceTypes]]
                AvailabilityZone: !Select [0, !Ref pAvailabilityZones]
                SubnetId: !Ref rProdAppPrivateSubnetA
              - InstanceType: !Select [1, !FindInMap [RegionMap, !Ref 'AWS::Region', InstanceTypes]]
                AvailabilityZone: !Select [1, !Ref pAvailabilityZones]
                SubnetId: !Ref rProdAppPrivateSubnetB

  rRenderFarmToLicenseServerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !ImportValue eLicenseServerSecurityGroup
      Description: render-farm-sg
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref rRenderFarmSecurityGroup

  rRenderSchedulerToRenderFarmIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref rRenderFarmSecurityGroup
      Description: render-scheduler-sg
      IpProtocol: '-1'
      SourceSecurityGroupId: !ImportValue eRenderSchedulerSecurityGroup

  rRenderFarmToRenderSchedulerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !ImportValue eRenderSchedulerSecurityGroup
      Description: render-farm-sg
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref rRenderFarmSecurityGroup

Outputs:
  rVPCProduction:
    Value: !Ref rVPCProduction

  pVPCProductionCIDR:
    Value: !Ref pVPCProductionCIDR

  pVPCProductionName:
    Value: !Ref pVPCProductionName

  rProdAppPrivateSubnetA:
    Value: !Ref rProdAppPrivateSubnetA

  rProdAppPrivateSubnetB:
    Value: !Ref rProdAppPrivateSubnetB

  rRouteTableProdPrivateA:
    Value: !Ref rRouteTableProdPrivateA

  rRouteTableProdPrivateB:
    Value: !Ref rRouteTableProdPrivateB

  rProdVpcFlowLogGroup:
    Value: !Ref rProdVpcFlowLogGroup

  rPeeringConnectionProduction:
    Value: !Ref rPeeringConnectionProduction

  VpcEndpointSecurityGroup:
    Value: !Ref VpcEndpointSecurityGroup